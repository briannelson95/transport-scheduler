generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String  @id @default(cuid())
  name          String
  users         User[]
  drivers       Driver[]
  buses         Bus[]
  trips         Trip[]
  tripLocations TripLocation[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  name            String
  type            UserType
  trips           Trip[]   @relation("UserTrips")
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Trip {
  id             String      @id @default(uuid())
  date           DateTime
  driver         Driver      @relation(fields: [driverId], references: [id])
  driverId       String
  bus            Bus?        @relation(fields: [busId], references: [id])
  busId          String?
  from_location  TripLocation @relation("FromLocation", fields: [fromLocationId], references: [id])
  fromLocationId String
  to_location    TripLocation @relation("ToLocation", fields: [toLocationId], references: [id])
  toLocationId   String
  duration       Int
  status         TripStatus  @default(Pending)

  users           User[] @relation("UserTrips")
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Canceled Canceled[]
}

model Driver {
  id              String   @id @default(uuid())
  name            String
  title           String?
  rate            Int
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  trips           Trip[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Bus {
  id                String   @id @default(uuid())
  number            Int
  type              BusType
  number_passengers Int
  wheelchair        Boolean
  nurse             Boolean
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id])
  trips             Trip[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model TripLocation {
  id              String  @id @default(uuid())
  name            String
  coordsX         Float
  coordsY         Float
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  fromTrips       Trip[] @relation("FromLocation")
  toTrips         Trip[] @relation("ToLocation")

  @@unique([name, organizationId])
}

model Canceled {
  id           String   @id @default(uuid())
  canceled     Boolean  @default(false)
  canceled_at  DateTime?
  canceled_by  String?
  reason       String?
  trip         Trip     @relation(fields: [tripId], references: [id])
  tripId       String   @unique
}

enum BusType {
  Van
  Bus
}

enum UserType {
  admin
  driver
  requester
}

enum TripStatus {
  Approved
  Pending
  Canceled
  Denied
  Completed
}